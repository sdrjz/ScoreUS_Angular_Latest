var common = require('./common');

var stepperTests = {
    'basic': function(done) {
        var stepper = new Stepper();
    
        // add steps
        stepper.add(function(err, val) {
            return 1;
        });
        stepper.add(function(err, val) {
            assert.equal(val, 1);
            if (err) throw err;
            return 2;
        });
        stepper.add(function(err, val) {
            assert.equal(val, 2);
            if (err) throw err;
            setTimeout(this, (waitSeconds * 1000));
        });
        stepper.add(function(err, val) {
            if (err) throw err;
            return 4;
        });
    
        // handle completion
        var onComplete = function(err, val) {
            if (err) {
                throw err;
            } else {
                assert.equal(val, 4);
                done();
            }
        };
        
        // run steps
        stepper.walk(onComplete);
    },
    'error': function(done) {
        var stepper = new Stepper();
    
        // add steps
        stepper.add(function(err, val) {
            return 1;
        });
        stepper.add(function(err, val) {
            assert.equal(val, 1);
            if (err) throw err;
            try {
                throw new Error('Unfunny serial error');
            } catch(err) {
                this(err, null);
            }
        });
        stepper.add(function(err, val) {
            if (err) throw err;
            setTimeout(this, (waitSeconds * 1000));
        });
        stepper.add(function(err, val) {
            if (err) throw err;
            return 4;
        });
        
        // handle completion
        var onComplete = function(err, val) {
            assert.equal(err.message, 'Unfunny serial error');
            done();
        };
    
        // run steps
        stepper.walk(onComplete);
    },
    'chainable': function(done) {
        var stepper = new Stepper();
    
        // add steps in a chain
        stepper.add(function(err, val) {
            return 1;
        }).add(function(err, val) {
            assert.equal(val, 1);
            if (err) throw err;
            return 2;
        }).add(function(err, val) {
            if (err) throw err;
            setTimeout(this, (waitSeconds * 1000));
        }).add(function(err, val) {
            if (err) throw err;
            return 4;
        });
    
        // handle completion
        var onComplete = function(err, val) {
            if (err) throw err;
            assert.equal(val, 4);
            done();
        };
    
        // run steps
        stepper.walk(onComplete);
    },
    'nestable': function(done) {
        var count = 0;

        // do a bunch of crazy nesting of steppers within steppers

        // a straight up stepper that will be nested
        var stepper3 = new Stepper();
        stepper3.add(function(err, val) {
            assert.equal(count, 3);
            count++;
            return 'a';
        });
        stepper3.add(function(err, val) {
            if (err) throw err;
            assert.equal(count, 4);
            count++;
            return 'b';
        });
        stepper3.add(function(err, val) {
            if (err) throw err;
            assert.equal(count, 5);
            count++;
            return 'c';
        });

        // a stepper with a nested stepper that will itself be nested
        var stepper2 = new Stepper();
        stepper2.add(function(err, val) {
            assert.equal(count, 1);
            count++;
            return 'a';
        });
        stepper2.add(function(err, val) {
            assert.equal(count, 2);
            if (err) throw err;
            count++;
            return 'b';
        });
        stepper2.add(stepper3);
        stepper2.add(function(err, val) {
            if (err) throw err;
            assert.equal(count, 6);
            count++;
            return 'c';
        });
        
        // the main stepper
        var stepper1 = new Stepper();
        stepper1.add(function(err, val) {
            assert.equal(count, 0);
            count++;
            return 1;
        });
        stepper1.add(stepper2);
        stepper1.add(function(err, val) {
            assert.equal(count, 7);
            if (err) throw err;
            count++;
            return 2;
        });
        stepper1.add(function(err, val) {
            assert.equal(count, 8);
            if (err) throw err;
            count++;
            setTimeout(this, (waitSeconds * 1000));
        });
        stepper1.add(function(err, val) {
            assert.equal(count, 9);
            if (err) throw err;
            count++;
            return 4;
        });
        
        // handle completion
        var onComplete = function(err, val) {
            if (err) {
                throw err;
            } else {
                assert.equal(val, 4);
                done();
            }
        };
        
        // run steps
        stepper1.walk(onComplete);
    }
};

module.exports = stepperTests;
