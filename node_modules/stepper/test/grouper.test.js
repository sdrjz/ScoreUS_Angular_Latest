var common = require('./common');

var grouperTests = {
    'basic': function(done) {
        var grouper = new Grouper();
    
        // setup group functions
        grouper.add(function(fn) {
            setTimeout(function() {
                fn(null, 1);
            }, (waitSeconds * 1000 * 3));
        });
        grouper.add(function(fn) {
            setTimeout(function() {
                fn(null, 2);
            }, (waitSeconds * 1000 * 2));
        });
        grouper.add(function(fn) {
            setTimeout(function() {
                fn(null, 3);
            }, (waitSeconds * 1000));
        });
    
        // handle completion
        var onComplete = function(err, vals) {
            if (err) {
                throw err;
            } else {
                assert.equal(vals[0], 1);
                assert.equal(vals[1], 2);
                assert.equal(vals[2], 3);
                done();
            }
        };
    
        // run steps
        grouper.walk(onComplete);
    },
    'error': function(done) {
        var grouper = new Grouper();
    
        // setup group functions
        grouper.add(function(fn) {
            setTimeout(function() {
                fn(null, 1);
            }, (waitSeconds * 1000 * 3));
        });
        grouper.add(function(fn) {
            setTimeout(function() {
                try {
                    throw new Error('Unfunny parallel error');
                } catch(err) {
                    fn(err, null);
                    return;
                }
                fn(null, 2);                
            }, (waitSeconds * 1000 * 2));
        });
        grouper.add(function(fn) {
            setTimeout(function() {
                fn(null, 3);
            }, (waitSeconds * 1000));
        });
    
        // handle completion
        var onComplete = function(err, vals) {
            assert.equal(err.message, 'Unfunny parallel error');
            done();
        };
    
        // run steps
        grouper.walk(onComplete);
    },
    'chainable': function(done) {
        var grouper = new Grouper();
    
        // setup group functions
        grouper.add(function(fn) {
            setTimeout(function() {
                fn(null, 1);
            }, (waitSeconds * 1000 * 3));
        }).add(function(fn) {
            setTimeout(function() {
                fn(null, 2);
            }, (waitSeconds * 1000 * 2));
        }).add(function(fn) {
            setTimeout(function() {
                fn(null, 3);
            }, (waitSeconds * 1000));
        });
    
        // handle completion
        var onComplete = function(err, vals) {
            if (err) {
                throw err;
            } else {
                assert.equal(vals[0], 1);
                assert.equal(vals[1], 2);
                assert.equal(vals[2], 3);
                done();
            }
        };
    
        // run steps
        grouper.walk(onComplete);
    },
    'nestable': function(done) {
        var count = 0;

        // nest a group in a stepper

        var grouper = new Grouper();
    
        // setup group functions
        grouper.add(function(fn) {
            setTimeout(function() {
                count++;
                fn(null, 1);
            }, (waitSeconds * 1000 * 3));
        });
        grouper.add(function(fn) {
            setTimeout(function() {
                count++;
                fn(null, 2);
            }, (waitSeconds * 1000 * 2));
        });
        grouper.add(function(fn) {
            setTimeout(function() {
                count++;
                fn(null, 3);
            }, (waitSeconds * 1000));
        });

        // the main stepper
        var stepper1 = new Stepper();
        stepper1.add(function(err, val) {
            assert.equal(count, 0);
            count++;
            return 1;
        });
        stepper1.add(grouper);
        stepper1.add(function(err, val) {
            assert.equal(count, 4);
            if (err) throw err;
            count++;
            return 2;
        });
        stepper1.add(function(err, val) {
            assert.equal(count, 5);
            if (err) throw err;
            var self = this;
            setTimeout(function() {
                count++;
                self();
            }, (waitSeconds * 1000));
        });
        stepper1.add(function(err, val) {
            assert.equal(count, 6);
            if (err) throw err;
            count++;
            return 4;
        });
        
        // handle completion
        var onComplete = function(err, val) {
            if (err) {
                throw err;
            } else {
                assert.equal(val, 4);
                assert.equal(count, 7);
                done();
            }
        };
        
        // run steps
        stepper1.walk(onComplete);
    }
};

module.exports = grouperTests;
